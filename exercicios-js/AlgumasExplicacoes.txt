Entendo o seu raciocínio quanto o statement(declaração) "CONST" - Afinal uma constante é imutável.

Mas primeiro, o legal é entender o conceito de lógica de programação quando falamos de variável.

Variável: Um valor lógico armazenado em memória para ser acessado em algum instante por rotinas, métodos.

Atribuição: Um operador usado para setar(atribuir) um VALOR LÓGIGO em sua variável.

Valor lógico: Condição a ser avaliada por operações: matemáticas, lógicas e tipos de dados...

Nesse três(3) conceitos você já consegue extrair uma resposta para sua pergunta.

Mas... JavaScript tem sua razões para implementação da palavra reservada CONST em ES6!

E a razão é o scope(escopo)!

O Javascript não possuía escopo por bloco - leia-se chaves {}, até o ES6. O que deixava brecha para que o dev. cometesse falhas por equívocos quanto a escopo, tipo uma estrutura de seleção if else por exemplo!

Por isso foi implementado as palavras reservadas LET e CONST para se definir VARIÁVEIS.

Então leia-se assim: VARIÁVEL PODE SER UMA [ LET, CONTS ] QUE RECEBE UM VALOR LÓGICO.

Então substitui-se a declaração VAR por LET ou CONST.

Logo: var = foo || let = foo || const = foo && (foo == VALOR LÓGICO). Percebe a diferença? - Atribuição e Comparação.

Agora a questão do dado ser MUTÁVEL ou não, tem a ver mais com a lógica do seu algoritmo. Entende!!

Se o dado vai mudar ao longo do tempo de vida execução do programa, É VOCÊ QUE DECIDE!

Você manda se vai de LET ou CONST para armazenar um VALOR LÓGICO.

Espero ter ajudado.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Operadores ternários são bem restritos nesse aspecto, ou seja: "ou é um ou é outro"

Caso você queira fazer algum tratamento pra isso você pode utilizar a estrutura do if/else


    function checarNota() {
        const nota = null
        if(nota) {
            return nota >= 7? "APROVADO" : "REPROVADO"
        } else {
            return "Nota não foi lançada no sistema"
        }
    }
     
    console.log(checarNota());

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
No node , cada arquivo é um modulo diferente , a aplicação é toda modularizada

-------------------------------------------------------------------------------------------------------------------
    CTRL + ;  (//)
    SHIFT + ALT + A (/**/)

    comentar no vscode

    CTRL + D 

    Digitar em todas as ocorrências da palavra

----------------------------------------------------------------------------------------------------------------------------------
for - para uma quantidade determinada de vezes
while - para uma quantidade indeterminada de vezes
switch - seleção multipla
if/else - seleção multipla tambem , se for mais especifico
----------------------------------------------------------------------------------------------------------------------------------
this é para acessar o dono do codigo , this em funções normais ele pode variar
dependente de quem faz a chamada ; this em arrow function não varia.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

As funções de seta e as declarações / expressões de função não são equivalentes e não podem ser substituídas às cegas.
Se a função que você quer substituir não usa this , arguments e não é chamada com new, então sim.


 

Não! As funções de seta e as declarações / expressões de função não são equivalentes e não podem ser substituídas às cegas.
Se a função que você quer substituir não usa this ,arguments e não é chamada com new , então sim.

 

Depende . As funções de seta têm um comportamento diferente das declarações / expressões de função, portanto, vamos dar uma olhada nas diferenças primeiro


 

As funções de seta não têm this ou ligação de arguments. Em vez disso, esses identificadores são resolvidos no escopo léxico como qualquer outra variável. Isso significa que dentro de uma função de seta, this e arguments referem aos valores this e arguments no ambiente em que a função de seta é definida (isto é, "fora" da função de seta)



Pesquina no MDN tentei colar os codigos mas nao deu certo