reduce :
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce
https://medium.freecodecamp.org/reduce-f47a7da511a9
https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/
https://medium.freecodecamp.org/reduce-f47a7da511a9
https://medium.com/shx-brasil/array-reduce-o-canivete-su%C3%ADço-da-programação-funcional-971c35590ed1

Template String:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/template_strings

middleware:
https://appdividend.com/2018/02/03/express-middleware-tutorial-example-scratch/

operador rest : https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_syntax

CDN - Content Delivery Network - importante para as requisicoes ao seu servidor (imagens, etc), serem mais rapidas e fluidas
----------------------------------------------------------------------
npm é o gerenciador de pacotes do node (node package manager)
npm i (é install)
-g (global)
.gitignore (são as coisas que eu quero que sejam ignoradas)

npm init

nodemon (global) - sudo npm i -g nodemon

npm i --save body-parser (muito importar para tratar do lado do servidor)

npm i node-schedule     (agendamento de tarefas)

npm i -g http-server   - servidor http
----------------------------------------------------------------------

APIs populares : https://github.com/toddmotto/public-apis
APIs brasileiras: https://99apis.com/home

API exp:
API, ou Application Programming Interface, é um conjunto de código disponível para a construção de aplicações ou outras APIs. Um exemplo:



Em java temos o StringBuilder, que é nada mais nada menos do que um conjunto de classes(pode ser uma classe só também), que disponibiliza uma série de métodos para a manipulação de strings!



No contexto da Web, o conceito de API está mais voltado para serviços disponibilizado pela Web para a construção de aplicações ou construção de outras APIs. Um exemplo:

A AWS(Amazon Web Services) disponibiliza APIs para questões de infra da tua aplicação! A API do Twitter você consegue consumir dados e ver tweets e perfis e por aí vai!



O que ambas tem em comum? São aglomerados de códigos disponibilizados para a construção de códigos e outras APIs!

https://contabo.com/  contabo vps
---------------------------------------------------------------------------
axios - é um client http , ele faz requisições http
lodash - é uma biblioteca , que ja tem varias funcionalidades prontas

package.json - arquivo descritor de um projeto em node, e a descrição de todas as dependências que o projeto precisa (assim como no rails)
package-lock.json - a versão que foi exatamente testada na máquina

npm init - inicia um projeto ( -y, yes to all)
--save (alem de colocar no node_modules , ele cria uma area para colocar as dependências do projeto(package.json))
--save-dev (necessário apenas em desenvolvimento e não em produção)

npm i --save express@4.16.3 body-parser@1.18.2 -E  (E é a versão exata)

http-server .
http-server -p 9090 .
http-server -c-1 .                (-c-1 tira o cache, que ja é padrão)

---------------------------------------------------------------------------
module file system já vem no node para ler arquivos (json)


padrão JS - Chain on Responsability ou Middleware (a função middleware tem 3 parâmetros: a requisição, a resposta e o next)

padrão Observer

-----------------------------------------------------------------------------------------
FRAMEWORKS Web

- Express JS - bom para fazer os webServices web
- SailsJS - não é tão minimalista que nem o express e tem mais funções
- Koa JS - bom para aplicações server-side




-----------------------------------------------------------------------------------------

Lembre-se da tabela osi
TCP (Transmission Control Protocol) - orientado a conexão (Confiável) (HandShake - conversa preliminar entre as duas pontas)
UDP (User Datagram Protocol) - não orientado a conexão (Baseado no melhor esforço (não tem confiabilidade, mais rapido e leve)) - Streaming de dados é geralmente usado nesse protocolo por ser em tempo real

Os processos são mapeados pela porta

os números de portas válidas vão de 0 a 65535. Sendo:

- 0 a 1023 portas do sistema

- 1024 a 49151 portas do usuário

- 49152 a 65535 portas dinâmicas e privadas

De HTTP, a porta padrão é a 80. Porém em ambiente de desenvolvimento, é cada vez mais raro ela ser utilizada por diversos motivos, como por exemplo conflito com outros programas (skype) ou provedores de internet que bloqueiam a porta 80 para o assinante não fazer da máquina dele um servidor e por aí vai...

Antigamente era comum utilizar a porta 8080 como alternativa no desenvolvimento e muitos ainda a utilizam, mas de uns tempos pra cá cresceu bastante a adoção da porta 3000 (3001, 3002, 3003... ) como padrão no desenvolvimento e até na produção de aplicações javascript backend.

Enfim, só é necessário cuidar pra não utilizar uma porta que já esteja em uso por outra aplicação no seu computador ou servidor.

Você pode verificar o padrão de algumas portas em:

https://pt.wikipedia.org/wiki/Lista_de_portas_dos_protocolos_TCP_e_UDP






----------------------------------------------------------------------------------------------------------------------------------------------------
Primeiramente, recursividade é quando você tem uma chamada para um método ou função dela para ela mesma.
Ela pode ser útil quando você precisa executar uma mesma tarefa repetidas vezes. Um exemplo de recursividade é um função para calcular o fatorial, olha só:

function fatorial(n){
    if(n <= 0){
        return 1
    }else{
        return n * fatorial(n-1)
    }
}

console.log(fatorial(3))

Uma ótima explicação de como funciona a recursividade: https://www.youtube.com/watch?v=X56_FjmbmE4


-----------------------------------------------------------------------------------------
conteudo dinamico é um conteudo que é gerado a partir de codigo (HTML)
conteudo estatico é um conteudo que é servido por um servidor web de forma estatica.

html é estrutura; css é o estilo; javascript é o comportamento.
servidor DNS - Traduz os nome de domínio em endereço ip , ex:   www.unknown.com.br      --->    54.69.61.89
cname , subdominio wild-card Amazon

DNS funciona sobre o protocolo UDP na porta 53
Um DNS pode apontar para outro DNS (por exemplo: um DNS do Brasil , pode apontar para um DNS nos EUA)
TLS - Transport Layer Security Protocol  (evolução do SSL)
SSL - Socket Layer Security Protocol
HTTPS =  HTTP + TLS
HTTPS =  HTTP + SSL
CA - Certificadora  Digital
lets encrypt e cloudflare, são free

certbot - automatiza o processo de instalação do certificado digital


querySelectorAll - ele retorna uma node list (não é a mesma coisa que um array, ele não tem algumas propriedades que um array tem)
para transformar ele em um array , existe uma função no array , chamado array.from





-----------------------------------------------------------------------------------------

CSS

label -[
https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/label
https://stackoverflow.com/questions/7636502/why-use-label
https://stackoverflow.com/questions/24652687/why-should-you-use-the-label-tag-and-for-attribute
]
viewport eh o tamanho da pagina

O bootstrap nas versões mais atuais já passou a utilizar flexbox, então não há necessidade de você utilizar combinado

https://uigradients.com

Eu não sou muito fã do bootstrap, existem outros frameworks que prefiro utilizar quando eu não quero perder muito tempo mexendo com css

Atualmente o meu queridinho é o Bulma (https://bulma.io/). Acho bem simples e fácil de lembrar e utilizar. Para fazer um grid basta eu colocar a class columns no container principal e column nos elementos que vão dentro do container que ele organiza. Para colocar o tamanho que ocupa no grid só usar is-size-4 e se quiser separar responsivo dá pra fazer is-size-4-desktop ,  is-size-5-tablet e is-size-6-mobile  Um botão basta colocar .button e se for primário é só adicionar .is-primary . Se um parágrafo precisar ser centralizado a class é .has-text-centered  e por aí vai E ele é modular também, se eu quiser utilizar só pra botões eu consigo que no build do projeto ele import só css respectivo para botões, se se for utilizar só grid, import do css só do grid. O que deixa mais leve.

Enfim, usar ou não um framework vai variar muito. E as vezes uso, as vezes não uso e geralmente tô sempre testando diferentes frameworks tb.


Typescript json  - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html

Gulp - https://www.typescriptlang.org/docs/handbook/gulp.html

NOTE  ANCHOR - Used to indicate a section in your file
TODO - An item that is awaiting competion
FIXME - An item that requires a bugfix
STUB - Used for generated default snippets
NOTE - An important note for a specific code section
REVIEW - An item that needs additional review
SECTION - Used to define a region (See 'Hierarchical anchors')


STUB
Cap bootstrap
npm i --save-dev jquery@3.3.1 -E
npm i --save-dev popper.js@1.14.3 -E             ToolTips
https://getbootstrap.com/docs/4.0/utilities/spacing/


STUB internacionalização

https://medium.freecodecamp.org/setting-up-internationalization-in-react-from-start-to-finish-6cb94a7af725?gi=7c1e421f5445

https://github.com/i18next/react-i18next




SECTION
REACT

npm i -g create-react-app
create-react-app  'nomeDoProjeto'


SECTION  JSON crud
JSON Server  -  npm i --save json-server@0.13.0 -E



package.json -
tira o teste e coloca o :
"scripts": {
    "start": "json-server --watch db.json --port 3001"
    Para fica monitorando o arquivo db.json na porta selecionada   NOTE  Backend na porta 3001 e front end na porta 3000


Aula 355-  create-react-app frontend
"axios": "0.18.0"   - cliente http, faz chamadas ajax (todas as operações necessárias, para salvar os dados no back-end)
"bootstrap": "4.1.1"  -  bootstrap
"font-awesome": "4.7.0"     - biblioteca de icones
"react-router": "4.2.0"     - para navegar entre os componentes
"react-router-dom": "4.2.2"   -


npm init -y  cria o package.json


SECTION
Links-

https://www.taniarascia.com/how-to-use-local-storage-with-javascript/
https://www.udemy.com/curso-web/learn/lecture/10666776#questions/6478512
https://desenvolvimentoparaweb.com/javascript/this-javascript-dominando/
https://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/
https://facebook.github.io/create-react-app/docs/adding-a-sass-stylesheet




pm2  - produção
nodemon - desenvolvimento

----------------------------------------------------------------------------------------------------

VUEJS

https://github.com/vuejs/awesome-vue#animation